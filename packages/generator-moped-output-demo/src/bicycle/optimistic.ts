// generated by ts-bicycle
// do not edit by hand

import {GetOptimisticValue} from 'bicycle/client/optimistic';

export {GetOptimisticValue};

export interface RootOptimisticUpdaters {}
export interface RootCache {
  get(name: 'user'): void | (null | UserCache);
  get(name: 'users'): void | UserCache[];
  set(name: 'user', value: null | UserCache): this;
  set(name: 'users', value: UserCache[]): this;
  getObject(typeName: 'User', id: string): UserCache;
}
export interface UserOptimisticUpdaters {
  createPasswordlessToken?: (
    mutation: {
      objectName: 'User';
      methodName: 'createPasswordlessToken';
      args: {email: string; state: {redirectURL: string}};
    },
    cache: RootCache,
    getOptimisticValue: GetOptimisticValue,
  ) => any;
  logout?: (
    mutation: {objectName: 'User'; methodName: 'logout'; args: void},
    cache: RootCache,
    getOptimisticValue: GetOptimisticValue,
  ) => any;
  setName?: (
    mutation: {objectName: 'User'; methodName: 'setName'; args: string},
    cache: RootCache,
    getOptimisticValue: GetOptimisticValue,
  ) => any;
  setPrivateStatus?: (
    mutation: {
      objectName: 'User';
      methodName: 'setPrivateStatus';
      args: string;
    },
    cache: RootCache,
    getOptimisticValue: GetOptimisticValue,
  ) => any;
  setPublicStatus?: (
    mutation: {objectName: 'User'; methodName: 'setPublicStatus'; args: string},
    cache: RootCache,
    getOptimisticValue: GetOptimisticValue,
  ) => any;
  verifyPasswordlessToken?: (
    mutation: {
      objectName: 'User';
      methodName: 'verifyPasswordlessToken';
      args: string;
    },
    cache: RootCache,
    getOptimisticValue: GetOptimisticValue,
  ) => any;
}
export interface UserCache {
  get(name: 'id'): void | number;
  get(name: 'name'): void | string;
  get(name: 'privateStatus'): void | string;
  get(name: 'publicStatus'): void | string;
  set(name: 'id', value: number): this;
  set(name: 'name', value: string): this;
  set(name: 'privateStatus', value: string): this;
  set(name: 'publicStatus', value: string): this;
}
export default interface OptimisticUpdaters {
  Root?: RootOptimisticUpdaters;
  User?: UserOptimisticUpdaters;
};
