// generated by ts-bicycle
// do not edit by hand

import {
  BaseRootQuery,
  addField,
  merge,
  BaseQuery,
  Mutation,
} from 'bicycle/typed-helpers/query';
import {RootCache, GetOptimisticValue} from './optimistic';

export class RootQuery<TResult = {}> extends BaseRootQuery<TResult> {
  // fields
  sessions<TSession>(
    Session: SessionQuery<TSession>,
  ): RootQuery<TResult & {sessions: TSession[]}> {
    return new RootQuery(
      addField(this._query, 'sessions', (Session as any)._query),
    );
  }

  merge<TOther>(other: RootQuery<TOther>): RootQuery<TResult & TOther> {
    return new RootQuery(merge(this._query, other._query));
  }

  // mutations
}
export class SessionQuery<TResult = {}> extends BaseQuery<TResult> {
  // fields
  get id(): SessionQuery<TResult & {id: number}> {
    return new SessionQuery(addField(this._query, 'id', true));
  }
  get userAgent(): SessionQuery<TResult & {userAgent: null | string}> {
    return new SessionQuery(addField(this._query, 'userAgent', true));
  }
  get lastSeen(): SessionQuery<TResult & {lastSeen: string}> {
    return new SessionQuery(addField(this._query, 'lastSeen', true));
  }

  merge<TOther>(other: SessionQuery<TOther>): SessionQuery<TResult & TOther> {
    return new SessionQuery(merge(this._query, other._query));
  }

  // mutations
  deleteSession(
    args: number,
    optimisticUpdate?: (
      mutation: {
        objectName: 'Session';
        methodName: 'deleteSession';
        args: number;
      },
      cache: RootCache,
      getOptimisticValue: GetOptimisticValue,
    ) => any,
  ): Mutation<void> {
    return new Mutation('Session.deleteSession', args, optimisticUpdate as any);
  }
}
