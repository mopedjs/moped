// generated by ts-bicycle
// do not edit by hand

import Schema from 'bicycle/types/Schema';
import SchemaKind from 'bicycle/types/SchemaKind';
import Query from 'bicycle/types/Query';
import QueryContext from 'bicycle/types/QueryContext';
import MutationContext from 'bicycle/types/MutationContext';
import BicycleServer, {Options} from 'bicycle/server-core';
import Root from './../bicycle-schema/Root';
import Session from './../bicycle-schema/Session';
import _Context0 from './../bicycle-schema/BicycleContext';

// root never has any actual data, so we create one reusable instance
const root = new Root({});
const schema: Schema<_Context0> = {
  Root: {
    kind: SchemaKind.NodeType,
    name: 'Root',
    description: undefined,
    id(): string {
      return 'root';
    },
    matches(obj: any): obj is Root {
      return obj instanceof Root;
    },
    fields: {
      sessions: {
        kind: SchemaKind.FieldMethod,
        name: 'sessions',
        description: undefined,
        resultType: {
          kind: 'List',
          element: {kind: 'Named', name: 'Session'},
        } as any,
        argType: {
          kind: 'Void',
          loc: {
            fileName:
              '/Users/fplindesay/Documents/GitHub/moped/packages/generator-moped-output-demo/src/bicycle-schema/Root.ts',
            line: 10,
          },
        } as any,
        auth: 'public',
        resolve(
          value: {},
          args: void,
          context: _Context0,
          subQuery: true | Query,
          qCtx: QueryContext<_Context0>,
        ): Session[] | PromiseLike<Session[]> {
          return root.sessions(args, context);
        },
      },
    },
    mutations: {},
  },
  Session: {
    kind: SchemaKind.NodeType,
    name: 'Session',
    description: undefined,
    id(obj: Session, ctx: _Context0, qCtx: QueryContext<_Context0>): string {
      return '' + obj.data.id;
    },
    matches(obj: any): obj is Session {
      return obj instanceof Session;
    },
    fields: {
      id: {
        kind: SchemaKind.FieldMethod,
        name: 'id',
        description: undefined,
        resultType: {
          kind: 'Number',
          loc: {
            fileName:
              '/Users/fplindesay/Documents/GitHub/moped/packages/generator-moped-output-demo/src/db-schema/tables/Sessions.ts',
            line: 8,
          },
        } as any,
        argType: {kind: SchemaKind.Void},
        auth: 'public',
        resolve(
          value: Session,
          args: void,
          context: _Context0,
          subQuery: true | Query,
          qCtx: QueryContext<_Context0>,
        ): number {
          return value.data.id;
        },
      },
      userAgent: {
        kind: SchemaKind.FieldMethod,
        name: 'userAgent',
        description: undefined,
        resultType: {
          kind: 'Union',
          elements: [{kind: 'Null'}, {kind: 'String'}],
          loc: {
            fileName:
              '/Users/fplindesay/Documents/GitHub/moped/packages/generator-moped-output-demo/src/db-schema/tables/Sessions.ts',
            line: 19,
          },
        } as any,
        argType: {kind: SchemaKind.Void},
        auth: 'public',
        resolve(
          value: Session,
          args: void,
          context: _Context0,
          subQuery: true | Query,
          qCtx: QueryContext<_Context0>,
        ): null | string {
          return value.data.userAgent;
        },
      },
      lastSeen: {
        kind: SchemaKind.FieldMethod,
        name: 'lastSeen',
        description: undefined,
        resultType: {
          kind: 'String',
          loc: {
            fileName:
              '/Users/fplindesay/Documents/GitHub/moped/packages/generator-moped-output-demo/src/bicycle-schema/Session.ts',
            line: 10,
          },
        } as any,
        argType: {kind: 'Void'} as any,
        auth: 'public',
        resolve(
          value: Session,
          args: void,
          context: _Context0,
          subQuery: true | Query,
          qCtx: QueryContext<_Context0>,
        ): string | PromiseLike<string> {
          return value.lastSeen();
        },
      },
    },
    mutations: {
      deleteSession: {
        kind: SchemaKind.Mutation,
        name: 'deleteSession',
        description: undefined,
        resultType: {kind: 'Void'} as any,
        argType: {
          kind: 'Number',
          loc: {
            fileName:
              '/Users/fplindesay/Documents/GitHub/moped/packages/generator-moped-output-demo/src/bicycle-schema/Session.ts',
            line: 27,
          },
        } as any,
        auth(
          args: number,
          context: _Context0,
          mCtx: MutationContext<_Context0>,
        ): boolean | PromiseLike<boolean> {
          return Session.$ownSession(args, context);
        },
        resolve(
          args: number,
          context: _Context0,
          mCtx: MutationContext<_Context0>,
        ): void | PromiseLike<void> {
          return Session.deleteSession(args, context);
        },
      },
    },
  },
};
export {Options};
export default class Server extends BicycleServer<_Context0> {
  constructor(options?: Options) {
    super(schema, options);
  }
}
